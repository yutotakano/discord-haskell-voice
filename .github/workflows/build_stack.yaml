# Heavy references from agda/agda's workflows, thank you!
name: Build (Stack)
on:
  push:
    branches:
      - master
  pull_request: {}

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build (stack) - ${{ matrix.os }} - ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    timeout-minutes:
      60
    continue-on-error: false
    strategy:
      matrix:
        os: ["ubuntu-20.04"]
        ghc: ["8.10.7", "9.0.2", "9.2.4"]
        include:
          - os: ubuntu-22.04
            ghc: "8.10.7"
          - os: macOS-latest
            ghc: "8.10.7"
          - os: windows-latest
            ghc: "8.10.7"
      fail-fast: false
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Install LLVM 12 for 8.10.7 and 9.0.2 on macOS
        if: ${{ matrix.os == 'macOS-latest' && (matrix.ghc == '8.10.7' || matrix.ghc == '9.0.2') }}
        run: |
          brew install llvm@12
          echo "OPT=$(brew --prefix llvm@12)/bin/opt" >> "${GITHUB_ENV}"
          echo "LLC=$(brew --prefix llvm@12)/bin/llc" >> "${GITHUB_ENV}"

      - name: Workaround for a problem with GHC 9.0.2 on Arm Mac
        run: echo "C_INCLUDE_PATH=`xcrun --show-sdk-path`/usr/include/ffi" >> "${GITHUB_ENV}"
        if: ${{ matrix.os == 'macOS-latest' && matrix.ghc == '9.0.2' }}

      - uses: haskell-actions/setup@v2
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}
          enable-stack: true

      - name: Set Haskell PATH and environment variables
        run: |
          echo "GHC=${{ steps.setup-haskell.outputs.ghc-exe }}" >> $GITHUB_ENV
          echo "STACK=${{ steps.setup-haskell.outputs.stack-exe }}" >> $GITHUB_ENV
          echo "STACK_ROOT=${{ steps.setup-haskell.outputs.stack-root }}" >> $GITHUB_ENV

      - name: Print and set GHC/Stack versions
        run: |
          ${GHC} --version || true
          ${STACK} --version || true
          echo "GHC_VER=$($GHC --numeric-version )" >> $GITHUB_ENV
          echo "STACK_VER=$($STACK --numeric-version )" >> $GITHUB_ENV
          env

      - name: Install libsodium and Opus (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          ${STACK} exec --system-ghc --stack-yaml stack-${GHC_VER}.yaml -- pacman -Sy --noconfirm msys2-keyring
          ${STACK} exec --system-ghc --stack-yaml stack-${GHC_VER}.yaml -- pacman -S --noconfirm mingw-w64-x86_64-pkg-config mingw-w64-x86_64-opus mingw-w64-x86_64-libsodium

      - name: Install libsodium (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get install -y libsodium-dev libopus-dev

      - name: Install libsodium (macOS)
        if: matrix.os == 'macOS-latest'
        run: |
          brew install libsodium opus

      - name: Cache Stack Dependencies
        id: cache
        uses: actions/cache@v3
        with:
          key: stack-${{ matrix.os }}-${{ env.GHC_VER }}-${{ env.STACK_VER }}-${{ hashFiles(format('stack-{0}.yaml', env.GHC_VER)) }}
          path: |
            ${{ env.STACK_ROOT }}
          restore-keys: |
            stack-${{ matrix.os }}-${{ env.GHC_VER }}-${{ env.STACK_VER }}-
            stack-${{ matrix.os }}-${{ env.GHC_VER }}-

      - name: Install dependencies
        if: ${{ !steps.cache.outputs.cache-hit }}
        run: |
          ${STACK} build --system-ghc --test --only-dependencies --stack-yaml stack-${GHC_VER}.yaml

      - name: Build discord-haskell-voice
        run: |
          ${STACK} build --system-ghc --test --no-run-tests --stack-yaml stack-${GHC_VER}.yaml

  # The following job always runs and checks the status of the previous jobs.
  # This is used for status checks for PRs since it abstracts away the actual
  # individual jobs generated by the matrices.
  status-post-job:
    if: always()
    name: Validate post job
    runs-on: ubuntu-latest
    # IMPORTANT! Any job added to the workflow should be added here too
    needs: [build]

    steps:
      - run: |
          echo "jobs info: ${{ toJSON(needs) }}"
      - if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1
